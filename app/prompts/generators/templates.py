"""
Prompt templates for LLM interactions.
Contains templates for different prompt types.
"""
from typing import List, Optional
from app.models.types import Section
from .constants import EDUCATIONAL_RULE


class PromptTemplates:
    """Manages prompt templates for different use cases."""
    
    def __init__(self):
        """Initialize prompt templates."""
        self.educational_rule = EDUCATIONAL_RULE
    
    def get_ai_detection_template(
        self,
        text: str,
        lang_name: str
    ) -> str:
        """Generate AI detection prompt template."""
        return f"""
{self.educational_rule}

You are an AI detection expert analyzing student essays to help educators identify potentially AI-generated content.

IMPORTANT: If the text below is in {lang_name}, you MUST respond ENTIRELY in {lang_name} language.

Your task is to analyze the following text and determine the likelihood that it was generated by an AI tool (like ChatGPT, Claude, etc.).

Guidelines:
- Consider factors like: formulaic phrasing, lack of personal voice, overly formal tone, lack of natural errors
- Score 0-30: Highly likely to be student-written (has personal voice, natural errors, authentic style)
- Score 31-60: Possibly mixed or uncertain (some AI-like patterns but also human-like characteristics)
- Score 61-85: Likely AI-generated (strong patterns of AI generation, formulaic structure)
- Score 86-100: Almost certainly AI-generated (clear AI patterns, no personal voice, formulaic)

Text to analyze:
{text}

Return ONLY valid JSON in this exact format:
{{
    "score": <integer between 0 and 100>,
    "rationale": "<brief explanation of your assessment, 2-3 sentences>",
    "caveats": ["<caveat 1>", "<caveat 2>", "<etc.>"]
}}

Important: Only return the JSON, no additional text before or after.
"""
    
    def get_feedback_template(
        self,
        text: str,
        criteria_text: str,
        lang_name: str
    ) -> str:
        """Generate feedback prompt template."""
        return f"""
{self.educational_rule}

You are an experienced high school teacher evaluating essays using the Extended Toulmin Model rubric.

IMPORTANT: The essay below is written in {lang_name}. You MUST respond ENTIRELY in {lang_name} language.

Your task is to evaluate the following essay using this rubric:

      {criteria_text}

Here is the essay to evaluate:
"{text}"

Analyze the essay and evaluate it according to each criterion. For each criterion, you must provide:
1. etiqueta: The criterion name in lowercase (e.g., "originalidad")
2. criterio: The full description of the criterion
3. valorMaximo: The maximum possible points for this criterion
4. logro: Achievement level ("Excepcional", "Muy Bien", "Bien", "Regular", "Insuficiente")
5. evaluacion: Qualitative description of the student's performance (2-3 sentences)
6. puntuacion: Numerical score (between 0 and valorMaximo) - MUST be consistent with logro level

SCORING GUIDELINES - You MUST follow these score ranges for each achievement level:
- Excepcional: Award 90-100% of valorMaximo points
- Muy Bien: Award 75-89% of valorMaximo points
- Bien: Award 60-74% of valorMaximo points
- Regular: Award 40-59% of valorMaximo points
- Insuficiente: Award 20-39% of valorMaximo points (DO NOT give 0 unless the work is completely absent or nonsense)

IMPORTANT: If the evaluacion mentions ANY positive aspects or partial work, the score MUST be at least 20% of valorMaximo. Only give 0 if there is absolutely no attempt or the text is nonsense.

Return ONLY valid JSON in this exact format:
{{
    "overview": "<Overall assessment of the essay in 2-3 sentences>",
    "per_criterion": [
        {{
            "etiqueta": "originalidad",
            "criterio": "¿Se usan enfoques creativos, metáforas o comparaciones inesperadas?",
            "valorMaximo": 22,
            "logro": "Muy Bien",
            "evaluacion": "Description of student performance...",
            "puntuacion": 17
        }},
        ...
    ]
}}

Important:
- Use a formal tone for all evaluations
- Be consistent in scoring (aim for 95% reproducibility)
- Match the puntuacion to the logro level using the scoring guidelines above
- Only set puntuacion to 0 if there is absolutely no attempt or the text is nonsense
- Return ONLY the JSON array, no additional text before or after
- All text MUST be in {lang_name} language
"""
    
    def get_guidance_template(
        self,
        section: Section,
        section_info: dict,
        lang_name: str,
        language: str
    ) -> str:
        """Generate guidance prompt template."""
        return f"""
{self.educational_rule}

You are an expert writing tutor helping students understand how to write the "{section}" section of an argumentative essay based on the Toulmin model.

IMPORTANT: You MUST provide all guidance ENTIRELY in {lang_name} language.

Section: {section}
Description: {section_info["description"]}
Purpose: {section_info["purpose"]}

Your task is to provide educational guidance for writing this section.

Return ONLY valid JSON in this exact format:
{{
    "section": "{section}",
    "purpose": "{section_info["purpose"]}",
    "steps": ["<step 1>", "<step 2>", "<step 3>", "<step 4>"],
    "checklist": ["<item 1>", "<item 2>", "<item 3>", "<item 4>", "<item 5>"],
    "examples_do": ["<good example 1>", "<good example 2>"],
    "examples_dont": ["<bad example 1>", "<bad example 2>"],
    "tips": ["<tip 1>", "<tip 2>", "<tip 3>", "<tip 4>"]
}}

Guidelines for content:
- Keep ALL text SHORT (max 15 words per item)
- "steps": 3-4 specific steps
- "checklist": 4-5 key elements
- "examples_do": 2 examples (SHORT only)
- "examples_dont": 2 examples (SHORT only)
- "tips": 3-4 tips

CRITICAL: Return ONLY the JSON object. No text before or after. Keep responses concise.

IMPORTANT: Provide all text in {language.upper()} language.
"""
    
    def get_section_check_template(
        self,
        section: Section,
        text: str,
        lang_name: str,
        language: str
    ) -> str:
        """Generate section check prompt template."""
        return f"""
{self.educational_rule}

You are an expert writing tutor reviewing a student's "{section}" section from their argumentative essay.

IMPORTANT: The student's text below is in {lang_name}. You MUST respond ENTIRELY in {lang_name} language.

Your task is to provide constructive, specific feedback to help the student improve.

Section: {section}

Student's text to review:
{text}

Provide feedback that:
- Highlights what the student did well (2-3 specific strengths)
- Identifies issues or areas for improvement (2-4 specific issues)
- Asks guiding questions to help the student think critically about their writing (3-4 questions)
- Suggests concrete revision strategies (3-4 actionable strategies)

Return ONLY valid JSON in this exact format:
{{
    "section": "{section}",
    "strengths": ["<strength 1>", "<strength 2>", "<strength 3>"],
    "issues": ["<issue 1>", "<issue 2>", "<issue 3>"],
    "questions_to_refine": ["<question 1>", "<question 2>", "<question 3>"],
    "revision_strategies": ["<strategy 1>", "<strategy 2>", "<strategy 3>"]
}}

Important: 
- Focus on specific, actionable feedback
- Use constructive language
- Ask questions that guide critical thinking
- Only return the JSON, no additional text before or after.

CRITICAL: Provide all feedback in {language.upper()} language.
"""
